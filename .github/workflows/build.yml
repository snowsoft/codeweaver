name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Fix Go modules
        run: |
          # Remove any cached modules that might cause conflicts
          go clean -modcache || true
          
          # Ensure clean go.mod
          cat > go.mod << 'EOF'
          module github.com/snowsoft/codeweaver
          
          go 1.21
          
          require (
              github.com/AlecAivazis/survey/v2 v2.3.7
              github.com/pterm/pterm v0.12.79
              github.com/sergi/go-diff v1.3.1
              github.com/spf13/cobra v1.8.0
              github.com/spf13/viper v1.18.2
              gopkg.in/yaml.v3 v3.0.1
          )
          EOF
          
      - name: Download dependencies
        run: |
          go mod download
          go mod tidy
          go mod verify
      
      - name: Format code
        run: |
          # Format all Go files
          gofmt -w .
          # Show if any files were changed
          git diff --exit-code || echo "Files were formatted"
      
      - name: Run tests
        run: go test -v ./...
      
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --out-format=colored-line-number

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          OUTPUT="weaver-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -ldflags="-w -s -X main.version=${{ github.ref_name }}" -o $OUTPUT .
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: weaver-${{ matrix.os }}-${{ matrix.arch }}
          path: weaver-*

  docker:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Create archives
        run: |
          cd artifacts
          for dir in */; do
            if [[ $dir == *"windows"* ]]; then
              zip -r "../${dir%/}.zip" "$dir"
            else
              tar -czf "../${dir%/}.tar.gz" "$dir"
            fi
          done
          cd ..
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "# Changelog" > changelog.md
          echo "" >> changelog.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: changelog.md
          files: |
            *.tar.gz
            *.zip
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}